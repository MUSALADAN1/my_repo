.....F...................F.............................................. [ 91%]
......F                                                                  [100%]
================================== FAILURES ===================================
_________________________ test_create_and_basic_calls _________________________

    def test_create_and_basic_calls():
        for name in ["binance", "bybit", "kucoin", "mt5"]:
>           adapter = create_adapter(name, {"api_key": "x", "api_secret": "y"})
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

test_exchange_adapters.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
backend\exchanges\__init__.py:227: in create_adapter
    inst = _try_construct(cls, config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cls = <class 'backend.exchanges.bybit_adapter.BybitAdapter'>
config = {'api_key': 'x', 'api_secret': 'y'}

    def _try_construct(cls: Type, config: Optional[Dict[str, Any]] = None):
        config = config or {}
        try:
            return cls(config)
        except TypeError:
            pass
        if isinstance(config, dict):
            try:
                return cls(**config)
            except TypeError:
                pass
        try:
>           return cls()
                   ^^^^^
E           TypeError: Can't instantiate abstract class BybitAdapter without an implementation for abstract methods 'cancel_order', 'fetch_open_orders', 'fetch_order'

backend\exchanges\__init__.py:64: TypeError
_______________________ test_process_file_buy_and_sell ________________________

tmp_path = WindowsPath('C:/Users/USER/AppData/Local/Temp/pytest-of-WANTED/pytest-2/test_process_file_buy_and_sell0')

    def test_process_file_buy_and_sell(tmp_path):
        events_file = tmp_path / "events.jsonl"
        processed = tmp_path / "processed.jsonl"
    
        # buy event then sell event
        buy_event = {"strategy": "ma_crossover", "signal": "buy", "symbol": "BTC/USDT", "amount": 0.5}
        sell_event = {"strategy": "ma_crossover", "signal": "sell", "symbol": "BTC/USDT"}
    
        with open(events_file, "w", encoding="utf-8") as f:
            f.write(json.dumps(buy_event) + "\n")
            f.write(json.dumps(sell_event) + "\n")
    
        broker = MockBroker()
        rm = RiskManager(max_concurrent_deals=2, trailing_stop_pct=0.03, drawdown_alert_pct=0.2)
        results = process_file(str(events_file), broker, rm, processed_path=str(processed))
    
        # Expect two results
        assert len(results) == 2
        # first should be buy ok
>       assert results[0]["status"] == "ok" and results[0]["action"] == "buy"
E       AssertionError: assert ('error' == 'ok'
E         
E         - ok
E         + error)

test_webhook_executor.py:34: AssertionError
---------------------------- Captured stderr call -----------------------------
{"ts":"2025-09-16 01:30:33,989","level":"INFO","cid":"63523f30530a493f815839c02dd17b76","event_id":"fe0b25179993119be32101adaa6b7f8d245e949f752054334fb1e7fdde9b56cf","msg":{"msg": "processing event", "extra": {"event": {"strategy": "ma_crossover", "signal": "buy", "symbol": "BTC/USDT", "amount": 0.5}}}}
{"ts":"2025-09-16 01:30:33,990","level":"WARNING","cid":"63523f30530a493f815839c02dd17b76","event_id":"fe0b25179993119be32101adaa6b7f8d245e949f752054334fb1e7fdde9b56cf","msg":{"msg": "order call attempt 1 failed; retrying after 0.5s: MockBroker.place_order() got an unexpected keyword argument 'event_id'"}}
{"ts":"2025-09-16 01:30:34,491","level":"WARNING","cid":"63523f30530a493f815839c02dd17b76","event_id":"fe0b25179993119be32101adaa6b7f8d245e949f752054334fb1e7fdde9b56cf","msg":{"msg": "order call attempt 2 failed; retrying after 1.0s: MockBroker.place_order() got an unexpected keyword argument 'event_id'"}}
{"ts":"2025-09-16 01:30:35,492","level":"ERROR","cid":"63523f30530a493f815839c02dd17b76","event_id":"fe0b25179993119be32101adaa6b7f8d245e949f752054334fb1e7fdde9b56cf","msg":{"msg": "order call failed after 3 attempts: MockBroker.place_order() got an unexpected keyword argument 'event_id'"}}
{"ts":"2025-09-16 01:30:35,495","level":"INFO","cid":"1cbe73cd4a984a8eb55418dd84e2edc3","event_id":"f6d8527714499babc7d29ccb67278c32f60a7fc6eb350ea56e8a236c2699c1d3","msg":{"msg": "processing event", "extra": {"event": {"strategy": "ma_crossover", "signal": "sell", "symbol": "BTC/USDT"}}}}
------------------------------ Captured log call ------------------------------
INFO     webhook_executor:webhook_executor.py:62 {"msg": "processing event", "extra": {"event": {"strategy": "ma_crossover", "signal": "buy", "symbol": "BTC/USDT", "amount": 0.5}}}
WARNING  webhook_executor:webhook_executor.py:64 {"msg": "order call attempt 1 failed; retrying after 0.5s: MockBroker.place_order() got an unexpected keyword argument 'event_id'"}
WARNING  webhook_executor:webhook_executor.py:64 {"msg": "order call attempt 2 failed; retrying after 1.0s: MockBroker.place_order() got an unexpected keyword argument 'event_id'"}
ERROR    webhook_executor:webhook_executor.py:66 {"msg": "order call failed after 3 attempts: MockBroker.place_order() got an unexpected keyword argument 'event_id'"}
INFO     webhook_executor:webhook_executor.py:62 {"msg": "processing event", "extra": {"event": {"strategy": "ma_crossover", "signal": "sell", "symbol": "BTC/USDT"}}}
_________________________ test_create_and_basic_calls _________________________

    def test_create_and_basic_calls():
        for name in ["binance", "bybit", "kucoin", "mt5"]:
>           adapter = create_adapter(name, {"api_key": "x", "api_secret": "y"})
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tools\test_exchange_adapters_tool.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
backend\exchanges\__init__.py:227: in create_adapter
    inst = _try_construct(cls, config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cls = <class 'backend.exchanges.bybit_adapter.BybitAdapter'>
config = {'api_key': 'x', 'api_secret': 'y'}

    def _try_construct(cls: Type, config: Optional[Dict[str, Any]] = None):
        config = config or {}
        try:
            return cls(config)
        except TypeError:
            pass
        if isinstance(config, dict):
            try:
                return cls(**config)
            except TypeError:
                pass
        try:
>           return cls()
                   ^^^^^
E           TypeError: Can't instantiate abstract class BybitAdapter without an implementation for abstract methods 'cancel_order', 'fetch_open_orders', 'fetch_order'

backend\exchanges\__init__.py:64: TypeError
============================== warnings summary ===============================
venv\Lib\site-packages\PyPDF2\__init__.py:21
  C:\Users\USER\my_trading_bot\venv\Lib\site-packages\PyPDF2\__init__.py:21: DeprecationWarning: PyPDF2 is deprecated. Please move to the pypdf library instead.
    warnings.warn(

test_plotting.py::test_plot_from_folder_creates_pngs
  C:\Users\USER\my_trading_bot\test_plotting.py:10: FutureWarning: 'H' is deprecated and will be removed in a future version, please use 'h' instead.
    idx = pd.date_range("2025-01-01", periods=20, freq="H")

tests/test_adx.py::test_adx_basic_runs
  C:\Users\USER\my_trading_bot\bot_core\indicators.py:205: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
    with pd.option_context("mode.use_inf_as_na", True):

tests/test_demand_supply.py::test_detect_zones_basic
  C:\Users\USER\my_trading_bot\tests\test_demand_supply.py:8: FutureWarning: 'T' is deprecated and will be removed in a future version, please use 'min' instead.
    idx = pd.date_range("2025-01-01", periods=40, freq="T")

tests/test_elliott.py::test_find_swings_and_detect_impulse_basic
  C:\Users\USER\my_trading_bot\tests\test_elliott.py:19: FutureWarning: 'T' is deprecated and will be removed in a future version, please use 'min' instead.
    idx = pd.date_range("2025-01-01", periods=len(prices), freq="T")

tests/test_fractals.py::test_detect_fractals_basic
  C:\Users\USER\my_trading_bot\tests\test_fractals.py:8: FutureWarning: 'T' is deprecated and will be removed in a future version, please use 'min' instead.
    idx = pd.date_range("2025-01-01", periods=11, freq="T")

tests/test_multitimeframe.py::test_resample_ohlcv_basic
tests/test_multitimeframe.py::test_align_multi_timeframes
tests/test_multitimeframe.py::test_multiwindow_snapshot
  C:\Users\USER\my_trading_bot\tests\test_multitimeframe.py:7: FutureWarning: 'T' is deprecated and will be removed in a future version, please use 'min' instead.
    idx = pd.date_range(start=start, periods=n, freq=freq)

tests/test_multitimeframe.py::test_resample_ohlcv_basic
tests/test_multitimeframe.py::test_align_multi_timeframes
tests/test_multitimeframe.py::test_align_multi_timeframes
tests/test_multitimeframe.py::test_align_multi_timeframes
tests/test_multitimeframe.py::test_multiwindow_snapshot
tests/test_multitimeframe.py::test_multiwindow_snapshot
  C:\Users\USER\my_trading_bot\bot_core\multitimeframe.py:89: FutureWarning: 'T' is deprecated and will be removed in a future version, please use 'min' instead.
    agg = odf.resample(timeframe, label="left", closed="left").agg({

tests/test_multitimeframe.py::test_resample_ohlcv_basic
tests/test_multitimeframe.py::test_align_multi_timeframes
tests/test_multitimeframe.py::test_align_multi_timeframes
tests/test_multitimeframe.py::test_align_multi_timeframes
tests/test_multitimeframe.py::test_multiwindow_snapshot
tests/test_multitimeframe.py::test_multiwindow_snapshot
  C:\Users\USER\my_trading_bot\bot_core\multitimeframe.py:117: FutureWarning: 'T' is deprecated and will be removed in a future version, please use 'min' instead.
    first_vals = odf.resample(timeframe, label="left", closed="left").first()

tests/test_multitimeframe.py::test_resample_ohlcv_basic
tests/test_multitimeframe.py::test_align_multi_timeframes
tests/test_multitimeframe.py::test_align_multi_timeframes
tests/test_multitimeframe.py::test_align_multi_timeframes
tests/test_multitimeframe.py::test_multiwindow_snapshot
tests/test_multitimeframe.py::test_multiwindow_snapshot
  C:\Users\USER\my_trading_bot\bot_core\multitimeframe.py:118: FutureWarning: 'T' is deprecated and will be removed in a future version, please use 'min' instead.
    last_vals = odf.resample(timeframe, label="left", closed="left").last()

tests/test_multitimeframe.py::test_align_multi_timeframes
tests/test_multitimeframe.py::test_align_multi_timeframes
tests/test_multitimeframe.py::test_multiwindow_snapshot
  C:\Users\USER\my_trading_bot\bot_core\multitimeframe.py:181: FutureWarning: 'T' is deprecated and will be removed in a future version, please use 'min' instead.
    bucket_keys = base_index.floor(tf)

tests/test_pivots_extra.py::test_pivots_from_df
  C:\Users\USER\my_trading_bot\tests\test_pivots_extra.py:28: FutureWarning: 'T' is deprecated and will be removed in a future version, please use 'min' instead.
    idx = pd.date_range("2025-01-01", periods=1, freq="T")

tests/test_sr_aggregate.py::test_aggregate_zones_basic
  C:\Users\USER\my_trading_bot\tests\test_sr_aggregate.py:6: FutureWarning: 'T' is deprecated and will be removed in a future version, please use 'min' instead.
    idx = pd.date_range(start=start, periods=n, freq="T")

tests/test_status_elliott.py::test_status_includes_elliott_snapshot
  C:\Users\USER\my_trading_bot\tests\test_status_elliott.py:9: FutureWarning: 'T' is deprecated and will be removed in a future version, please use 'min' instead.
    idx = pd.date_range("2025-01-01", periods=10, freq="T")

tests/test_strategy_metrics_snapshot.py::test_metrics_snapshot_records_zone_skip
  C:\Users\USER\my_trading_bot\tests\test_strategy_metrics_snapshot.py:34: FutureWarning: 'H' is deprecated and will be removed in a future version, please use 'h' instead.
    idx = pd.date_range("2025-01-01", periods=n, freq="H")

tests/test_trend_zone_filter.py::test_zone_filter_blocks_long
  C:\Users\USER\my_trading_bot\tests\test_trend_zone_filter.py:9: FutureWarning: 'H' is deprecated and will be removed in a future version, please use 'h' instead.
    idx = pd.date_range("2025-01-01", periods=n, freq="H")

tests/test_zone_metrics.py::test_run_backtest_records_zone_skips
  C:\Users\USER\my_trading_bot\tests\test_zone_metrics.py:17: FutureWarning: 'H' is deprecated and will be removed in a future version, please use 'h' instead.
    idx = pd.date_range("2025-01-01", periods=n, freq="H")

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
FAILED test_exchange_adapters.py::test_create_and_basic_calls - TypeError: Ca...
FAILED test_webhook_executor.py::test_process_file_buy_and_sell - AssertionEr...
FAILED tools/test_exchange_adapters_tool.py::test_create_and_basic_calls - Ty...
3 failed, 76 passed, 36 warnings in 37.34s
